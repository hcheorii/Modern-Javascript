데이터 타입(줄여서 "타입"이라고도 한다)은 <span style="color : yellow">값의 종류</span>를 말한다. 자바스크립트의 모든 값은 데이터 타입을 갖는다. 자바스크립트(ES6)는 7개의 데이터 타입을 제공한다. 7개의 데이터 타입은 원시 타입과 객체 타입으로 분류할 수 있다.

### 📖 숫자 타입
C언어나 자바의 경우 정수(소수점 이하가 없는 숫자)와 실수(소수점 이하가 있는 숫자)를 구분해서 int, long, float, double 등과 같은 다양한 숫자 타입을 제공한다. 하지만 자바스크립트는 독특하게 하나의 숫자 타입만 존재한다.

숫자 타입의 값은 배정밀도 64비트 부동소수점 형식을 따른다. 즉, 모든 수를 실수로 처리하며, 정수만 표현하기 위한 데이터 타입이 별도로 존재하지 않는다. 자바스크립트는 2진수, 8진수, 16진수를 표현하기 위한 데이터 타입을 제공하지 않아, 값을 참조하면 모두 10진수로 해석된다.

```javascript
var binary = 0b01000001; 
var octal = 0o101;
var hex = 0x41;

console.log(binary); //65
console.log(octal); //65
console.log(hex); //65
console.log(binary === octal); //true
console.log(octal === hex); //true
```
숫자 타입은 추가적으로 세 가지의 특별한 값도 표현할 수 있다.
- Infinity : 양의 무한대
- -Infinity : 음의 무한대
- NaN : 산술 연산 불가 (not a number)
---
### 📖 문자열 타입
문자열 타입은 텍스트 데이터를 나타내는 데 사용한다. 문자열은 0개 이상의 16비트 유니코드 문자 (UTF-16)의 집합으로 전 세계 대부분의 문자를 표현할 수 있다.

문자열은 작은따옴표(''), 큰따옴표("") 또는 백틱(``)으로 텍스트를 감싼다. 가장 일반적으로는 작은따옴표를 사용한다.

다른 타입의 값과 달리 문자열을 따옴표로 감싸는 이유는 키워드나 식별자 같은 토큰과 구분하기 위해서다.
만약 문자열을 따홈표로 감싸지 않으면 자바스크립트 엔진은 키워드나 식별자 같은 토큰으로 인식한다.

아래 예제를 보면 따옴표로 감싸지 않은 hello를 식별자로 인식한다. (reference error 발생)

예제
```javascript
var string = hello;
```
---

### 📖 템플릿 문자열
ES6부터 템플릿 리터럴이라고 하는 새로운 문자열 표기법이 도입됐다.
템플릿 리터럴은 멀티라인 문자열, 표현식 삽입, 태그드 템플릿 등 편리한 문자열 처리 기능을 제공한다. 템플릿 리터럴은 런타임에 일반 문자열로 변환되어 처리된다.

예제
```javascript
var template = `Template literal`;
console.log(template);
```
일반 문자열 내에서는 줄바꿈이 허용되지 않지만 템플릿 문자열에서는 줄바꿈, 들여쓰기 등이 적용된다.

---

### 📖 불리언 타입
불리언 타입의 값은 논리적 참, 거짓을 나타내는 true와 false 뿐이다.

예제
```javascript
var foo = true;
console.log(foo); //true

foo = false;
console.log(foo) //false
```
불리언 타입의 값은 참과 거짓으로 구분되는 <span style = "color : yellow">조건에 의해 프로그램의 흐름을 제어하는 조건문에서 자주 사용한다.</span>

---
### 📖 undefined 타입
var 키워드로 선언한 변수는 암묵적으로 undefined로 초기화된다. 다시 말해, 변수 선언에 의해 확보된 메모리 공간을 처음 할당이 이뤄질 떄까지 빈 상태(대부분 비어있지 않고 쓰레기 값이 들어있다)로 내버려두지 않고 자바스크립트 엔진이 undefined로 초기화한다. 따라서 변수를 선언한 이후 값을 할당하지 않은 변수를 참조하면 undefined가 반환된다.

<span style="color : yellow">그렇다면 변수에 값이 없다는 것을 의도적으로 명시하고 싶을 때는 어떻게 하면 좋을까? 그런 경우에는 undefined를 할당하는 것이 아니라 null을 할당한다.</span>

---
### 📖 심벌 타입
심벌은 ES6에서 추가된 7번째 타입으로, 변경 불가능한 원시 타입의 값이다.
<span style="color:yellow">심벌 값은 다른 값과 중복되지 않는 유일무이한 값이다.</span>
따라서 주로 이름이 충돌할 위험이 없는 객체의 유일한 프로퍼티 키를 만들기 위해 사용한다.
```javascript
var key = Symbol("key");
console.log(typeof key); //symbol

var obj = {};

//이름이 충돌할 위험이 없는 유일무이한 값인 심벌을 프로퍼티 키로 사용한다.
obj[key] = "value";
console.log(obj[key]); //value
```
---

### 📖 데이터 타입의 필요성
#### 데이터 타입에 의한 메모리 공간의 확보와 참조
값은 메모리에 저장하고 참조할 수 있어야 한다. <span style="color:yellow">메모리에 값을 저장하러면 먼저 확보해야 할 메모리 공간의 크기를 결정해야 한다.</span>

다시 말해, 몇 바이트의 메모리  공간을 사용해야 낭비와 손실 없이 값을 저장할 수 있는지 알아야 한다. 예를 들어, 다음과 같이 변수를 선언하고 숫자 값을 할당해보자.

```javascript
var score = 100;
```
위 코드가 실행되면 컴퓨터는 숫자 값 100을 저장하기 위해 메모리 공간을 확보한 다음, 확보된 메모리에 숫자 값 100을 2진수로 저장한다.
<span style="color:yellow">이러한 처리를 하려면 숫자 값을 저장할 때 확보해야 할 메모리 공간의 크기를 알아야 한다.</span>
즉 값의 종류에 따라 정해진 크기의 메모리 공간을 확보한다. 즉, 변수에 할당되는 값의 데이터 타입에 따라 확보해야 할 메모리 공간의 크기가 결정된다.

데이터 타입이 필요한 이유 3가지
- 값을 저장할 때 <span style="color:yellow">확보해야 하는 메모리 공간의 크기를 결정하기 위해</span>
- 값을 참조할 때 한 번에 읽어 들여야 할 <span style="color:yellow">메모리 공간의 크기를 결정하기 위해</span>
- 메모리에서 읽어 들인 <span style="color:yellow">2진수를 어떻게 해석할지 결정하기 위해</span>
---
### 📖 동적 타이핑
#### 동적 타입 언어와 정적 타입 언어
자바스크립트의 모든 값은 데이터 타입을 갖는다고 했다. 그렇다면 변수는 데이터 타입을 가질까??

C나 Java 같은 <span style="color:yellow">정적 타입 언어</span>는 변수를 선언할 때 변수에 할당할 수 있는 값의 종류, 즉, 데이터 타입을 사전에 선언해야 한다. 이를 명시적 타입 선언이라 한다. 

정적 타입 언어는 변수의 타입의 변경이 불가능하고, 변수에 선언한 타입에 맞는 값만 할당이 가능하다. 정적 타입 언어는 컴파일 시점에서 타입체크를 수행하여 통과하지 못하면 에러를 발생시키고 프로그램의 실행 자체를 막는다.

<span style="color:yellow">자바스크립트는 정적 타입 언어와 다르게 변수를 선언할 때 타입을 선언하지 않는다.</span>
다만 var, let, const 키워드를 사용해 변수를 선언할 뿐이다. 자바스크립트의 변수는 정적 타입 언어와 같이 미리 선언한 데이터 타입의 값만 할당할 수 있는 것이 아니다. 어떠한 데이터 타입의 값이라도 자유롭게 할당이 가능하다.

다시 말해, <span style="color:yellow">자바스크립트의 변수는 선언이 아닌 할당에 의해 타입이 결정된다.</span> 이러한 특징을 <span style="color:yellow">동적 타이핑</span>이라 하며, 자바스크립트를 정적 타입 언어와 구별하기 위해 <span style="color:yellow">동적 타입 언어</span>라 한다.
