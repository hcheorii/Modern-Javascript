# 1장 프로그래밍
### 1.1 프로그래밍이란?

>
컴퓨터에게 실행을 요구하는 일종의 <span style="color:yellow">커뮤니케이션</span>이다. 이를 위해 해결해야 할 문제(요구사항)를 명확히 이해한 후 적절한 문제 해결 방안을 정의할 필요가 있다.
대부분의 요구사항들은 복잡하고 명확하지 않을 수 있다. 따라서 요구사항을 명확이 이해하는 것이 우선시되어야 한다.
즉, 프로그래밍이란 0과 1만 알고있는 기계가 실행할 수 있을 정도로 <span style="color:yellow">정확하고 상세하게 요구사항을 설명하는 작업</span>이다.

### 1.2 프로그래밍 언어
문제 해결 능력을 바탕으로 정의된 문제 해결 방안은 컴퓨터에게 전달되어야 한다. 이때 명령을 수행하는 주체는 컴퓨터이기 때문에 사람이 이해할 수 있는 자연어가 아닌 컴퓨터가 이해할 수 있는 언어, 즉 <span style="color:yellow">기계어</span>로 명령을 전달해야 한다.

하지만 사람이 기계어를 이해하고 기계어로 직접 명령을 전달하는 것은 쉬운 일이 아니다.
기계어는 우리가 사용하는 언어와 매우 다르고 비트 단위로 기술되어있기 때문이다.
직접 명령을 전달하는 것을 대신하는 가장 유용한 대안은 사람이 이해할 수 있는 약속된 구문으로 구성된 <span style="color:yellow">프로그래밍 언어</span>를 사용해서 작성 후 그것을 기계어로 변환하는 일종의 번역기<span style="color:yellow">(컴파일러, 인터프리터)</span>를 이용하는 것이다.

# 2장 자바스크립트란?
### 2.1 자바스크립트의 탄생
>
1995년 약 90%의 시장 점유율로 웹 브라우저 시장을 지배하고 있던 넷스케이프 커퓨니케이션즈는  <span style="color:yellow">웹페이지의 보조적인 기능을 수행하기 위해</span> 브라우저에서 동작하는 경량 프로그래밍 언어를 도입하기로 결정한다. 그래서 탄생한 것이 바로 자바스크립트이다.

### 2.2 자바스크립트의 표준화
1996년 마이크로 소프트는 자바스크립트의 파생 버전인 "JScript"를 인터넷 익스플로러 3.0에 탑재했는데, 문제는 JScript와 자바스크립트가 표준화되지 못하고 적당히 호환되었다는 것이다.
즉, 넷스케이프와 마이크로소프트는 자사 브라우저의 점유율을 높이기 위해 자사 브라우저에서만 동작하는 기능을 경쟁적으로 추가하기 시작헀다는 것이다.

이로인해 크로스 브라우징 이슈가 발생하기 시작했고, 모든 브라우저에서 정상적으로 동작하는 웹페이지를 개발하기가 무척 어려워졌다.

이에 1997년 ECMA-262라고 불리는 표준화된 자바스크립트 초판 사양이 완성되었고, 상표권 문제로 자바스크립트는 ECMAScript로 명명됐다. 이후, 1999년 ECMAScript 3(ES3)이 공개되고, 10년 만인 2009년에 출시된 ECMAScript 5 (ES5)는 HTML5와 함께 출현한 표준 사양이다.

### 2.3 자바스크립트 성장의 역사

#### 2.3.1 Ajax
>
1999년 자바스크립트를 이용해 서버와 브라우저가 비동기 방식으로 데이터를 교환할 수 있는 통신 기능인 Ajax가 XMLHttpRequest라는 이름으로 등장했다.

이전의 웹은 html 코드를 서버로부터 받아서 웹페이지 전체를 랜더링하는 방식으로 동작했다.
따라서 화면이 전환되면 서버로부터 새로운 html을 전송받아 웹페이지 전체를 처음부터 다시 랜더링했다.
이러한 방식은 변경할 필요가 없는 부분까지 포함된 html 코드를 서버로부터 다시 전송받기 때문에 불필요한 데이터 통신이 발생하기 때문에 성능 면에서 불리하다.

Ajax의 등장은 이러한 패러다임을 획기적으로 전환했다. 즉, 웹페이지에서 변경할 필요가 없는 부분은 다시 랜더링하지 않고, 서버로부터 필요한 데이터만 받아서  변경해야 하는 부분만 한정적으로 랜더링 하는 방식이 가능해졌다.

이로써 웹 브라우저에서도 데스크톱 애플리케이션과 유사한 빠른 성능과 부드러운 화면전환이 가능해졌다.

#### 2.3.2 Node.js
>
Node.js는 구글 V8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임 환경이다.

Node.js는 브라우저의 자바스크립트 엔진에서만 동작하던 자바스크립트를 브라우저 이외의 환경에서도 동작할 수 있도록 자바스크립트 엔진을 브라우저에서 독립시킨 자바스크립트 실행 환경이다.

Node.js는 비동기 I/O를 지원하며 단일 스레드 이벤트 루프 기반으로 동작함으로써 요청처리 성능이 좋다. 따라서 Node.js는 데이터를 실시간으로 처리하기 위해 I/O가 빈번하게 발생하는 SPA(single page application)에 적합하다. 하지만 CPU 사용률이 높은 애플리케이션에는 권장하지 않는다.


#### 2.3.3 SPA 프레임워크
이전의 개발 방식으로는 복잡해진 개발 과정을 수행하기 어려워졌고, 이런 필요에 따라서 많은 패턴과 라이브러리가 출현했다.
그 덕분에 개발에 많은 도움을 주었지만 변경에 유연하면서 확장하기 쉬운 애플리케이션 아키텍처의 구축을 어렵게 했고, 필연적으로 프레임워크가 등장하게 되었다. (Angular, React, Vue 등)

#### 2.3.4 자바스크립트의 특징
- 웹 브라우저에서 동작하는 유일한 프로그래밍 언어
- 인터프리터 언어
- 명령형, 함수형, 프로토타입 기반 객체지향 프로그래밍을 지원하는 멀티 패러다임 프로그래밍 언어

- 인터프리터 언어
  - 코드가 실행되는 단계인 런타임에 문 단위로 한 줄씩 중간 코드인 바이트코드로 변환 후 실행
  - 실행 파일을 생성하지 않는다.
  - 인터프리터 단계와 실행 단계가 분리되어 있지 않다, 인터프리터는 한 줄씩 바이트코드로 변환하고 즉시 실행한다.
  - 코드가 실행될 때마다 인터프리트 과정이 반복 수행된다.
  - 인터프리트 단계와 실행 단계가 분리되어 있지 않고 반복 수행되므로 실행 속도가 비교적 느리다.
- 컴파일러 언어
  - 코드가 실행되기 전 단계인 컴파일 타임에 소스코드 전체를 한번에 머신 코드로 변환한 후 실행한다.
  - 실행 파일을 생성한다.
  - 컴파일 단계와 실행 단계가 분리되어 있다. 명시적인 컴파일 단계를 거치고, 명시적으로 실행 파일을 실행한다.
  - 실행에 앞서 컴파일은 단 한번 수행된다.
  - 컴파일과 실행 단계가 분리되어 있으므로 코드 실행 속도가 빠르다.
